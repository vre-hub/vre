apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease 
metadata:
  name: jhub-vre
  namespace: jhub
spec:
  releaseName: jhub-vre
  interval: 5m
  chart:
    spec:
      sourceRef:
        kind: HelmRepository
        name: jhub-vre
        namespace: jhub
      chart: jupyterhub
      interval: 5m
      version: 3.3.7 
  valuesFrom:
    - kind: Secret
      name: jhub-vre-iam-secrets
      valuesKey: client_id
      targetPath: hub.config.RucioAuthenticator.client_id
    - kind: Secret
      name: jhub-vre-iam-secrets
      valuesKey: client_secret
      targetPath: hub.config.RucioAuthenticator.client_secret
    - kind: Secret
      name: jhub-vre-db
      valuesKey: dbconnectstring
      targetPath: hub.db.url
    - kind: ConfigMap
      name: jhub-profiles
      valuesKey: values.yaml
    - kind: Secret
      name: jupyterhub-auth-state
      valuesKey: JUPYTERHUB_CRYPT_KEY
      targetPath: hub.extraEnv.JUPYTERHUB_CRYPT_KEY
      
  values:
    proxy:
      service:
        type: ClusterIP
    hub:
      service:
        type: ClusterIP
      # network policy needs to be modified to allow access to the Rucio server
      # (disabling it for now as a workaround, see also the ones for singeluser and proxy below)
      networkPolicy:
        enabled: false
      db:
        #upgrade: true
        type: postgres # passed as s secret (dbconnect string) from the jhub-vre-db secret
      
      config:
        JupyterHub:
          authenticator_class: "generic-oauth"
        RucioAuthenticator:
          # client_id: "" # set through secret
          # client_secret: "" # set through secret
          authorize_url: https://iam-escape.cloud.cnaf.infn.it/authorize
          token_url: https://iam-escape.cloud.cnaf.infn.it/token
          userdata_url: https://iam-escape.cloud.cnaf.infn.it/userinfo
          username_key: preferred_username
          enable_auth_state: true
          allow_all: true
          scope:
            - openid
            - profile
            - email

      extraConfig:

        token-exchange: |
          import pprint
          import os
          import warnings
          import requests
          from oauthenticator.generic import GenericOAuthenticator

          # custom authenticator to enable auth_state and get access token to set as env var for rucio extension
          class RucioAuthenticator(GenericOAuthenticator):
              def __init__(self, **kwargs):
                  super().__init__(**kwargs)
                  self.enable_auth_state = True

              def exchange_token(self, token):
                  params = {
                      'client_id': self.client_id,
                      'client_secret': self.client_secret,
                      'grant_type': 'urn:ietf:params:oauth:grant-type:token-exchange',
                      'subject_token_type': 'urn:ietf:params:oauth:token-type:access_token',
                      'subject_token': token,
                      'scope': 'openid profile',
                      'audience': 'rucio'
                  }
                  response = requests.post(self.token_url, data=params)
                  print("EXCHANGE TOKEN")
                  print(response.json())
                  rucio_token = response.json()['access_token']

                  return rucio_token
                  
              async def pre_spawn_start(self, user, spawner):
                  auth_state = await user.get_auth_state()
                  #print("AUTH_state")
                  #pprint.pprint(auth_state)
                  if not auth_state:
                      # user has no auth state
                      return False
                  
                  # define token environment variable from auth_state
                  spawner.environment['RUCIO_ACCESS_TOKEN'] = self.exchange_token(auth_state['access_token'])
                  spawner.environment['EOS_ACCESS_TOKEN'] = auth_state['access_token']
          
          # set the above authenticator as the default
          c.JupyterHub.authenticator_class = RucioAuthenticator

          # enable authentication state
          c.GenericOAuthenticator.enable_auth_state = True
        
    singleuser:
      extraLabels:
        component: singleuser-server
      defaultUrl: "/lab"
      # The liefcycle hooks are used to create the Rucio configuration file,
      # and the token file by copying the REFRESH_TOKEN from the environment variable to the token file.
      startTimeout: 1200
      lifecycleHooks:
        postStart:
          exec:
            command:
              - "sh"
              - "-c"
              - |
                if [ "${SKIP_POSTSTART_HOOK}" = "true" ]; then
                  echo "hello world";
                else
                  mkdir -p /certs /tmp;
                  echo -n $RUCIO_ACCESS_TOKEN > /tmp/rucio_oauth.token;
                  echo -n "oauth2:${EOS_ACCESS_TOKEN}:iam-escape.cloud.cnaf.infn.it/userinfo" > /tmp/eos_oauth.token;
                  chmod 0600 /tmp/eos_oauth.token;
                  mkdir -p /opt/rucio/etc;
                  echo "[client]" >> /opt/rucio/etc/rucio.cfg;
                  echo "rucio_host = https://vre-rucio.cern.ch" >> /opt/rucio/etc/rucio.cfg;
                  echo "auth_host = https://vre-rucio-auth.cern.ch" >> /opt/rucio/etc/rucio.cfg;
                  echo "ca_cert = /certs/rucio_ca.pem" >> /opt/rucio/etc/rucio.cfg;
                  echo "account = $JUPYTERHUB_USER" >> /opt/rucio/etc/rucio.cfg;
                  echo "auth_type = oidc" >> /opt/rucio/etc/rucio.cfg;
                  echo "oidc_audience = rucio" >> /opt/rucio/etc/rucio.cfg;
                  echo "oidc_polling = true" >> /opt/rucio/etc/rucio.cfg;
                  echo "oidc_issuer = escape" >> /opt/rucio/etc/rucio.cfg;
                  echo "oidc_scope = openid profile offline_access" >> /opt/rucio/etc/rucio.cfg;
                  echo "auth_token_file_path = /tmp/rucio_oauth.token" >> /opt/rucio/etc/rucio.cfg;
                fi;
                
      networkPolicy:
        enabled: false
      storage:
        type: static
        static:
          pvcName: jhub-vre-singleuser-preprovisioned-manila-pvc # manually added an existing share (refer to jhub-storage.yaml)
        extraVolumes:
          - name: cvmfs-vre
            persistentVolumeClaim:
              claimName: cvmfs-vre-pvc
          - name: eospilot-eulake # mounts the EOS RSE needed for the Rucio JupiterLab extension
            hostPath:
              # path: /var/eos/eulake # This is pointing to /eos/pilot/eulake/escape/data, defined on the configmap/eos-csi-dir-etc-eo  
              path: /var/eos/pilot
          - name: eos-atlas
            hostPath:
              path: /var/eos/atlas
        extraVolumeMounts:
          - name: cvmfs-vre
            mountPath: /cvmfs
            # CVMFS automount volumes must be mounted with HostToContainer mount propagation.
            mountPropagation: HostToContainer
          - name: eospilot-eulake # mounts the EOS RSE needed for the Rucio JupiterLab extension
            mountPath: /eos/eulake
            mountPropagation: HostToContainer
            readOnly: true 
          - name: eos-atlas
            mountPath: /eos/atlas
            mountPropagation: HostToContainer
            readOnly: true
      image:
        name: ghcr.io/vre-hub/vre-singleuser-py311
        tag: sha-281055c
        pullPolicy: Always

      # nodeSelector: 
      #   jupyter: singleuser
      # extraTolerations:
      #   - key: jupyter
      #     operator: Equal
      #     value: singleuser
      #     effect: NoSchedule
      memory:
        limit: 2G #4G 
        guarantee: 1G #2G 

      cmd: null
      extraEnv:
    #     JUPYTERHUB_SINGLEUSER_APP: "notebook.notebookapp.NotebookApp"
        RUCIO_MODE: "replica"
        RUCIO_WILDCARD_ENABLED: "1"
        RUCIO_BASE_URL: "https://vre-rucio.cern.ch"
        RUCIO_AUTH_URL: "https://vre-rucio-auth.cern.ch"
        RUCIO_WEBUI_URL: "https://vre-rucio-ui.cern.ch"
        RUCIO_DISPLAY_NAME: "RUCIO - CERN VRE"
        RUCIO_NAME: "vre-rucio.cern.ch"
        RUCIO_SITE_NAME: "CERN"
        RUCIO_OIDC_AUTH: "env"
        RUCIO_OIDC_ENV_NAME: "RUCIO_ACCESS_TOKEN"
        RUCIO_DEFAULT_AUTH_TYPE: "oidc"
        RUCIO_OAUTH_ID: "rucio"
        RUCIO_DEFAULT_INSTANCE: "vre-rucio.cern.ch"
        RUCIO_DESTINATION_RSE: "CERN-EOSPILOT"
        RUCIO_RSE_MOUNT_PATH: "/eos/eulake"
        RUCIO_PATH_BEGINS_AT: "5" # becase we are need to substitute /eos/pilot/eulake/escape/data with /eos/eulake
        RUCIO_CA_CERT: "/certs/rucio_ca.pem"
        OAUTH2_TOKEN: "FILE:/tmp/eos_oauth.token"

      # extraFiles:
      #   jupyter_notebook_config.json:
      #     mountPath: /etc/jupyter/jupyter_notebook_config.json
      #     data:
      #       MappingKMappingKernelManager:
      #         cull_idle_timeout: 3600
      #         cull_interval: 600
      #         cull_busy: false
      #         cull_connected: true

    prePuller:
      hook:
        enabled: true

    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt" # this issues a certificate for the domain through cert-manager automatically
      hosts:
        - jhub-vre.cern.ch 
      tls:
        - hosts:
            - jhub-vre.cern.ch
          secretName: cert-manager-tls-ingress-secret-jhub
               
